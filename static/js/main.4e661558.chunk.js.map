{"version":3,"sources":["reducers/reducer_activity/selectors.js","reducers/reducer_activity/activity_actions.js","pages/ShowActivity.js","reducers/reducer_activity/activity_reducer.js","reducers/reducer_joke/joke_actions.js","reducers/reducer_joke/joke_reducer.js","reducers/root_reducer.js","reducers/reducer_joke/selectors.js","pages/ShowJoke.js","App.js","index.js"],"names":["dataSelector","state","activity","data","loadingSelector","loading","errorSelector","error","FETCH_ACTIVITY_BEGIN","FETCH_ACTIVITY_SUCCESS","FETCH_ACTIVITY_FAILURE","fetchActivityDetail","dispatch","type","fetch","then","res","json","payload","console","log","login","catch","err","connect","props","useEffect","style","color","initialState","FETCH_JOKE_BEGIN","FETCH_JOKE_SUCCESS","FETCH_JOKE_FAILURE","CHANGE_JOKE_TEST","fetchJokeDetail","joke","rootReducer","combineReducers","action","jokeSelector","errSelectoror","setup","delivery","className","onClick","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"gPAAaA,EAAe,SAAAC,GAAK,OAAIA,EAAMC,SAASC,MACvCC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAC1CC,EAAgB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,OCFxCC,EAAyB,uBACzBC,EAAyB,yBACzBC,EAAyB,yBAiBzBC,EAAsB,WAC/B,OAAO,SAAAC,GAEH,OADAA,EAjB4B,CAClCC,KAAML,IAiBOM,MAAM,yCACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAGF,OAFAL,EAjBiC,CAC3CC,KAAMJ,EACNS,QAAS,CAAEf,KAe6Bc,KAC9BE,QAAQC,IAAIH,EAAKI,OACVJ,EAAKd,QAEfmB,OAAM,SAAAC,GAAQX,EAhBuB,CAC5CC,KAAMH,EACNQ,QAAS,CAAEX,MAcwCgB,U,OCCtCC,eANS,SAACvB,GAAD,MAAY,CAChCE,KAAMH,EAAaC,GACnBI,QAASD,EAAgBH,GACzBM,MAAOD,EAAcL,MAGVuB,EAxBM,SAACC,GAElB,IAAMb,EAAWa,EAAMb,SAMvB,OALAc,qBAAU,WACNd,EAASD,OACX,CAACC,IAIC,gCACI,oBAAIe,MAAO,CAACC,MAAO,OAAnB,SAA4BH,EAAMlB,OAAS,UAC3C,0CACA,oBAAIoB,MAAO,CAACC,MAAO,QAAnB,SAA6BH,EAAMpB,SAAW,sCAC9C,6BAAKoB,EAAMtB,MAAQsB,EAAMtB,KAAKD,iB,OCZpC2B,EAAe,CACjB1B,KAAM,GACNE,SAAS,EACTE,MAAO,MCVEuB,EAAqB,mBACrBC,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAmB,mBAsBnBC,EAAkB,WAC3B,OAAO,SAAAtB,GAEH,OADAA,EAtBwB,CAC9BC,KAAMiB,IAsBOhB,MAAM,kEACZC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAGF,OAFAL,EAtB6B,CACvCC,KAAMkB,EACNb,QAAS,CAAEf,KAoByBc,KAC1BE,QAAQC,IAAIH,GACLA,KAEVK,OAAM,SAAAC,GAAQX,EArBmB,CACxCC,KAAMmB,EACNd,QAAS,CAAEX,MAmBoCgB,UC3B3CM,EAAe,CACjBM,KAAM,GACN9B,SAAS,EACTE,MAAO,MCNE6B,EAAcC,YAAgB,CACvCnC,SHOsB,WAAiC,IAAhCD,EAA+B,uDAAzB4B,EAAcS,EAAW,uCACtD,OAAOA,EAAOzB,MACV,KAAKL,EACD,OAAO,2BACAP,GADP,IAEII,SAAS,EACTE,MAAO,OAEf,KAAKE,EACD,OAAO,2BACAR,GADP,IAEII,SAAS,EACTF,KAAMmC,EAAOpB,QAAQf,OAE7B,KAAKO,EACD,OAAO,2BACAT,GADP,IAEII,SAAS,EACTE,MAAO+B,EAAOpB,QAAQX,MACtBJ,KAAM,KAEd,QACI,OAAOF,IG5BfkC,KDOuB,WAAiC,IAAhClC,EAA+B,uDAAzB4B,EAAcS,EAAW,uCACvD,OAAOA,EAAOzB,MACV,KAAKiB,EACD,OAAO,2BACA7B,GADP,IAEII,SAAS,EACTE,MAAO,KACP4B,KAAM,KAEd,KAAKJ,EAaL,KAAKE,EACD,OAAO,2BACAhC,GADP,IAEII,SAAS,EACT8B,KAAMG,EAAOpB,QAAQf,OAX7B,KAAK6B,EACD,OAAO,2BACA/B,GADP,IAEII,SAAS,EACTE,MAAO+B,EAAOpB,QAAQX,MACtB4B,KAAM,KAQd,QACI,OAAOlC,ME3CNsC,EAAe,SAAAtC,GAAK,OAAIA,EAAMkC,KAAKA,MACnC/B,EAAkB,SAAAH,GAAK,OAAIA,EAAMkC,KAAK9B,SACtCC,EAAgB,SAAAL,GAAK,OAAIA,EAAMkC,KAAKK,eCkDlChB,eANS,SAACvB,GAAD,MAAY,CAClCE,KAAMoC,EAAatC,GACnBI,QAASD,EAAgBH,GACzBM,MAAOD,EAAcL,MAGRuB,EAxCE,SAACC,GAChB,IAAMb,EAAWa,EAAMb,SACvBc,qBAAU,WACRd,EAASsB,OACR,CAACtB,IAMJ,OACE,gCACE,oBAAIe,MAAO,CAAEC,MAAO,OAApB,SAA8BH,EAAMlB,OAAS,UAC7C,sCACA,oBAAIoB,MAAO,CAAEC,MAAO,QAApB,SACGH,EAAMpB,SAAW,oCAEpB,6BAAKoB,EAAMtB,MAAQsB,EAAMtB,KAAKsC,QAC9B,6BAAKhB,EAAMtB,MAAQsB,EAAMtB,KAAKuC,WAC9B,gCACE,wBAAQC,UAAU,sBAAsBC,QAd1B,WAClBhC,EJAmC,CACrCC,KAAMoB,EACNf,QAAS,CAACf,KIFgB,CAAEsC,MAAO,OAAQC,SAAU,YAa/C,kBAGA,wBACEC,UAAU,sBACVC,QAAS,kBAAMhC,EAASsB,MAF1B,8BC3BFW,G,MAAQC,YAAYV,EAAaW,YAAgBC,OAiBxCC,MAff,WACE,OACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,sBAAKF,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,YCbVO,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4e661558.chunk.js","sourcesContent":["export const dataSelector = state => state.activity.data\nexport const loadingSelector = state => state.activity.loading\nexport const errorSelector = state => state.activity.error","export const FETCH_ACTIVITY_BEGIN   = 'FETCH_ACTIVITY_BEGIN';\nexport const FETCH_ACTIVITY_SUCCESS = 'FETCH_ACTIVITY_SUCCESS';\nexport const FETCH_ACTIVITY_FAILURE = 'FETCH_ACTIVITY_FAILURE';\n\nexport const fetchActivity = () => ({\n  type: FETCH_ACTIVITY_BEGIN\n});\n\nexport const fetchActivitySuccess = data => ({\n  type: FETCH_ACTIVITY_SUCCESS,\n  payload: { data }\n});\n\nexport const fetchActivityFailure = error => ({\n  type: FETCH_ACTIVITY_FAILURE,\n  payload: { error }\n});\n\n\nexport const fetchActivityDetail = () => {\n    return dispatch=> {\n        dispatch(fetchActivity())\n        return fetch(\"https://www.boredapi.com/api/activity\")\n        .then(res => res.json())\n        .then(json => {\n            dispatch(fetchActivitySuccess(json))\n            console.log(json.login)\n            return json.data\n        })\n        .catch(err => {dispatch(fetchActivityFailure(err))});\n    }\n}","import React, {useEffect} from 'react'\nimport { connect } from 'react-redux'\nimport {dataSelector, loadingSelector, errorSelector} from '../reducers/reducer_activity/selectors'\nimport { fetchActivityDetail } from '../reducers/reducer_activity/activity_actions'\n\n\nconst ShowActivity = (props) => {\n\n    const dispatch = props.dispatch\n    useEffect(() => {\n        dispatch(fetchActivityDetail())\n    },[dispatch])\n\n    \n    return (\n        <div>\n            <h1 style={{color: \"red\"}}>{props.error && \"ERROR\"}</h1>\n            <h1>Activity</h1>\n            <h1 style={{color: \"blue\"}}>{props.loading && \"Fetching Activity, Please Wait...\"}</h1>\n            <h1>{props.data && props.data.activity}</h1>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    data: dataSelector(state),\n    loading: loadingSelector(state),\n    error: errorSelector(state)\n})\n\nexport default connect(mapStateToProps)(ShowActivity)","import {\n    FETCH_ACTIVITY_BEGIN,\n    FETCH_ACTIVITY_SUCCESS,\n    FETCH_ACTIVITY_FAILURE\n} from './activity_actions'\n\n\nconst initialState = {\n    data: {},\n    loading: false,\n    error: null\n}\n\nexport const reducerOne = (state=initialState, action) => {\n    switch(action.type) {\n        case FETCH_ACTIVITY_BEGIN:\n            return {\n                ...state,\n                loading: true,\n                error: null\n            }\n        case FETCH_ACTIVITY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                data: action.payload.data\n            }\n        case FETCH_ACTIVITY_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                data: {}\n            }\n        default:\n            return state\n    }\n}","export const FETCH_JOKE_BEGIN   = 'FETCH_JOKE_BEGIN';\nexport const FETCH_JOKE_SUCCESS = 'FETCH_JOKE_SUCCESS';\nexport const FETCH_JOKE_FAILURE = 'FETCH_JOKE_FAILURE';\nexport const CHANGE_JOKE_TEST = 'CHANGE_JOKE_TEST';\n\nexport const fetchJoke = () => ({\n  type: FETCH_JOKE_BEGIN\n});\n\nexport const fetchJokeSuccess = joke => ({\n  type: FETCH_JOKE_SUCCESS,\n  payload: { data : joke }\n});\n\nexport const fetchJokeFailure = error => ({\n  type: FETCH_JOKE_FAILURE,\n  payload: { error }\n});\n\nexport const changeJokeTest = joke => ({ \n  type: CHANGE_JOKE_TEST,\n  payload: {data : joke}\n})\n\n\nexport const fetchJokeDetail = () => {\n    return dispatch=> {\n        dispatch(fetchJoke())\n        return fetch(\"https://v2.jokeapi.dev/joke/Programming?type=twopart?safe-mode\")\n        .then(res => res.json())\n        .then(json => {\n            dispatch(fetchJokeSuccess(json))\n            console.log(json)\n            return json\n        })\n        .catch(err => {dispatch(fetchJokeFailure(err))});\n    }\n}","import {\n    FETCH_JOKE_BEGIN,\n    FETCH_JOKE_SUCCESS,\n    FETCH_JOKE_FAILURE,\n    CHANGE_JOKE_TEST\n} from './joke_actions'\n\n\nconst initialState = {\n    joke: {},\n    loading: false,\n    error: null\n}\n\nexport const jokeReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case FETCH_JOKE_BEGIN:\n            return {\n                ...state,\n                loading: true,\n                error: null,\n                joke: {}\n            }\n        case FETCH_JOKE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                joke: action.payload.data\n            }\n        case FETCH_JOKE_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                joke: {}\n            }\n        case CHANGE_JOKE_TEST:\n            return {\n                ...state,\n                loading: false,\n                joke: action.payload.data\n            }\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport { reducerOne } from './reducer_activity/activity_reducer'\nimport { jokeReducer } from './reducer_joke/joke_reducer'\n\n\nexport const rootReducer = combineReducers({\n    activity: reducerOne,\n    joke: jokeReducer\n})","export const jokeSelector = state => state.joke.joke\nexport const loadingSelector = state => state.joke.loading\nexport const errorSelector = state => state.joke.errSelectoror","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  fetchJokeDetail,\n  changeJokeTest,\n} from \"../reducers/reducer_joke/joke_actions\";\nimport {\n  jokeSelector,\n  loadingSelector,\n  errorSelector,\n} from \"../reducers/reducer_joke/selectors\";\n\nconst ShowJoke = (props) => {\n  const dispatch = props.dispatch;\n  useEffect(() => {\n    dispatch(fetchJokeDetail());\n  }, [dispatch]);\n\n  const buttonClick = () => {\n    dispatch(changeJokeTest({ setup: \"test\", delivery: \"test\" }));\n  };\n\n  return (\n    <div>\n      <h1 style={{ color: \"red\" }}>{props.error && \"ERROR\"}</h1>\n      <h1>Joke</h1>\n      <h1 style={{ color: \"blue\" }}>\n        {props.loading && \"Fetching A Joke, Please Wait...\"}\n      </h1>\n      <h1>{props.data && props.data.setup}</h1>\n      <h2>{props.data && props.data.delivery}</h2>\n      <div>\n        <button className=\"elem__button--right\" onClick={buttonClick}>\n          Test\n        </button>\n        <button\n          className=\"elem__button--right\"\n          onClick={() => dispatch(fetchJokeDetail())}\n        >\n          NewJoke\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  data: jokeSelector(state),\n  loading: loadingSelector(state),\n  error: errorSelector(state),\n});\n\nexport default connect(mapStateToProps)(ShowJoke);\n","import { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport ShowActivity from \"./pages/ShowActivity\";\nimport { rootReducer } from \"./reducers/root_reducer\";\nimport ShowJoke from \"./pages/ShowJoke\";\nimport \"./App.css\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"block__main\">\n        <div className=\"block__left\">\n          <ShowActivity />\n        </div>\n        <div className=\"block__right\">\n          <ShowJoke />\n        </div>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}